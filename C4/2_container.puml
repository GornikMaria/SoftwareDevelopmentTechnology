@startuml Контекстная диаграмма
title "Диаграмма компонентов системы бронирования отеля"

!define DEVICONS1 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define DEVICONS2 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!$ICONURL = "https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v3.0.0/icons"
!include $ICONURL/common.puml
!include DEVICONS2/postgresql.puml

Person(hotel, "Отель", "Управление бронированиями и отзывами")
Person(admin, "Администратор", "Модерация отзывов и управление системой")
Person(guest, "Гость", "Поиск и бронирование отелей")

System_Boundary(HotelSettings_container, "Настройки отеля") {
    Container(extranet, "Личный кабинет отеля", "ReactTS", "Веб приложение, отображающее внутренние продукты")
    Container(guestProfile, "Личный профиль пользователя", "ReactTS", "Веб приложение, занимающееся личными данными пользователя, историей и бронированием")

    Container(reviews, "Сервис отзывов", "C#", "Сервис размещения, визуалиации и валидации отзывов")
    Container(bookingSystem, "Сервис бронирования отелей", "C#", "Сервис для поиска и бронирования отелей")
    Container(subscriptionManager, "Сервис управления подписок", "C#", "Управляет подписками отеля, проводит оплаты и отправляет письма")
    Container(analytics, "Сервис аналитики", "C#", "Сервис для обработки и сбора аналитики")
    Container(notificationServiceHandler, "Сервис обработки уведомлений", "C#", "Обрабатывает уведомления и взаимодействует с внешним API уведомлений")
    Container(paymentService, "Сервис обработки платежей", "C#", "Обрабатывает платежи и взаимодействует с API платежных систем")

    ContainerDb(postgres, "Database", "PostgreSQL", "Хранит данные", $sprite="postgresql")
    ContainerDb(redis, "Database", "Redis", "Кеширует данные", $sprite="redis")
    ContainerDb(rabbit, "Message bus", "RabbitMQ", "Пушит уведомления о происхождении событий")
}

together {
    System_Ext(paymentAPI, "API платежных систем", "Обработка платежей")
    System_Ext(notificationService, "Сервис уведомлений", "Отправка уведомлений пользователям")
    System_Ext(externalAPI, "API карт", "Интеграция с картами (Google, Яндекс)")
}

together {
    hotel --> extranet : "Посещает", "HTTP"
    admin --> extranet : "Посещает", "HTTP"
    guest --> guestProfile : "Посещает", "HTTP"
}

together {
    extranet ---> bookingSystem : "API вызовы", "REST API"
    extranet ---> reviews : "API вызовы", "REST API"
    extranet ---> analytics : "API вызовы", "REST API"
    extranet ---> subscriptionManager : "API вызовы", "REST API"
    guestProfile ---> bookingSystem : "API вызовы", "REST API"
}

extranet ---> postgres : "Читает/пишет данные", "SQL/TCP"
guestProfile ---> postgres : "Читает/пишет данные", "SQL/TCP"

together {
    subscriptionManager -right-> paymentService : "API вызовы", "REST API"
    subscriptionManager -right-> notificationServiceHandler : "Отправляет уведомления", "REST API"
    bookingSystem -right-> paymentService : "API вызовы", "REST API"
    bookingSystem -right-> notificationServiceHandler : "Отправляет уведомления", "REST API"
    reviews -right-> subscriptionManager : "API вызовы", "REST API"
    analytics -left-> subscriptionManager : "API вызовы", "REST API"
}

analytics ---> postgres : "Читает/пишет данные", "SQL/TCP"
reviews ---> postgres : "Читает/пишет данные", "SQL/TCP"
analytics ---> redis : "Читает/пишет данные", "SQL/TCP"
bookingSystem ---> redis : "Читает/пишет данные", "SQL/TCP"
bookingSystem ---> postgres : "Читает/пишет данные", "SQL/TCP"

notificationServiceHandler ---> rabbit : "Читает/пишет данные", "SQL/TCP"
analytics ---> rabbit : "Читает/пишет данные", "SQL/TCP"
subscriptionManager ---> rabbit : "Читает/пишет данные", "SQL/TCP"
reviews ---> rabbit : "Читает/пишет данные", "SQL/TCP"
bookingSystem ---> rabbit : "Читает/пишет данные", "SQL/TCP"

together {
    notificationServiceHandler ----> notificationService : "API вызовы", "REST API"
    paymentService ----> paymentAPI : "API вызовы", "REST API"
    extranet ----> externalAPI : "API вызовы", "REST API"
    guestProfile ----> externalAPI : "API вызовы", "REST API"
}

' analytics --> rabbit : "Использует"
' bookingSystem --> rabbit : "Использует"
@enduml