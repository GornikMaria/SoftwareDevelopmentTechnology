@startuml

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

!define DEVICONS1 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define DEVICONS2 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2

!include DEVICONS1/redis.puml
!include DEVICONS2/csharp.puml
!include DEVICONS2/postgresql.puml

Person(hotel, "Отель", "Управление бронированиями и отзывами")
Person(admin, "Администратор", "Модерация отзывов и управление системой")
Person(guest, "Гость", "Поиск и бронирование отелей")

Container(extranet, "Личный кабинет отеля", "ReactTS", "Веб приложение, отображающее внутренние продукты")
Container(extranetService, "Сервис личного кабинета отеля", "C#", "WebAPI приложение, собирающее данные для ЛК отеля")
Container(guestProfile, "Личный профиль пользователя", "ReactTS", "Веб приложение, занимающееся личными данными пользователя, историей и бронированием")
Container(guestProfileService, "Сервис личного кабинета пользователя", "C#", "WebAPI приложение, собирающее данные для ЛК гостя")

hotel --> extranet : "Посещает"
admin --> extranet : "Посещает"
extranet --> extranetService : "API вызовы", "REST API"
guest --> guestProfile : "Посещает"
guestProfile --> guestProfileService : "API вызовы", "REST API"

Container_Boundary(bookingService_container, "Сервис Бронирования") {
    Component(bookingController, "Контроллер Бронирования", "C#", "Позволяет пользователям управлять бронированиями")
    Component(bookingEngine, "Модуль Бронирования", "C#", "Обрабатывает процесс бронирования, поиск доступности, создание бронирований и т.д.")
    Component(reservationManager, "Менеджер Бронирований", "C#", "Управляет существующими бронированиями: изменения, отмены, подтверждения")
}

together {
    Container(notificationServiceFacade, "Сервис обработки уведомлений", "C#", "Обрабатывает уведомления и взаимодействует с внешним API уведомлений")
    Container(paymentAPIFacade, "Сервис обработки платежей", "C#", "Обрабатывает платежи и взаимодействует с API платежных систем")
}

together {
    ContainerDb(postgres, "db booking sceheme", "PostgreSQL", "Хранит информацию о пользователях, бронированиях, отзывах и другую информацию", $sprite="postgresql")
    ContainerDb(redis, "cache booking scheme", "Redis", "Кеширует информацию о поисковых операциях", $sprite="redis")
    ContainerDb(rabbit, "Message bus", "RabbitMQ", "Пушит уведомления о происхождении событий")
}

extranetService --> bookingController : "Делает API запросы к контроллеру бронирований", "JSON/HTTPS"
guestProfileService --> bookingController : "Делает API запросы к контроллеру бронирований", "JSON/HTTPS" 

bookingController --> bookingEngine : "Обрабатывает запросы бронирования"
bookingController --> reservationManager : "Управляет бронированиями"

together {
    bookingEngine ---> rabbit : "Публикует события бронирования"
    reservationManager ---> rabbit : "Публикует события управления бронированиями"
    bookingEngine ---> postgres : "Читает из и записывает в", "SQL/TCP"
    reservationManager ---> postgres : "Читает из и записывает в", "SQL/TCP"
    bookingEngine ---> redis : "Читает из и записывает в", "SQL/TCP"
    reservationManager ---> redis : "Читает из и записывает в", "SQL/TCP"
}

bookingEngine --> notificationServiceFacade : "Инициирует уведомления"
bookingEngine --> paymentAPIFacade : "Инициирует платежи"
reservationManager --> notificationServiceFacade : "Инициирует уведомления"
reservationManager --> paymentAPIFacade : "Управляет возвратами и отменами"

@enduml
