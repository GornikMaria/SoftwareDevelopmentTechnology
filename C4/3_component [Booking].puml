@startuml

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

!define DEVICONS1 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define DEVICONS2 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2

!include DEVICONS1/redis.puml
!include DEVICONS2/csharp.puml
!include DEVICONS2/postgresql.puml

Person(hotel, "Отель", "Управление бронированиями и отзывами")
Person(admin, "Администратор", "Модерация отзывов и управление системой")
Person(guest, "Гость", "Поиск и бронирование отелей")


Container(extranet, "Личный кабинет отеля", "ReactTS", "Веб приложение для управления бронированиями и отзывами")
Container(guestProfile, "Личный профиль пользователя", "ReactTS", "Веб приложение для управления личными данными и историей бронирования")

' Данные
ContainerDb(postgres, "Database", "PostgreSQL", "Хранит информацию о пользователях, бронированиях, отзывах и другую информацию", $sprite="postgresql")
ContainerDb(redis, "Database", "Redis", "Кеширует информацию о поисковых операциях", $sprite="redis")
ContainerDb(rabbit, "Message bus", "RabbitMQ", "Пушит уведомления о происхождении событий")

Container_Boundary(bookingService_container, "Сервис Бронирования") {
    ' Вход в API
    Component(bookingController, "Контроллер Бронирования", "C#", "Позволяет пользователям управлять бронированиями")
    Rel_D(extranet, bookingController, "Делает API запросы к контроллеру бронирований", "JSON/HTTPS")
    Rel_D(guestProfile, bookingController, "Делает API запросы к контроллеру бронирований", "JSON/HTTPS")

    ' Обработчики API
    Component(bookingEngine, "Модуль Бронирования", "C#", "Обрабатывает процесс бронирования, поиск доступности, создание бронирований и т.д.")
    Component(reservationManager, "Менеджер Бронирований", "C#", "Управляет существующими бронированиями: изменения, отмены, подтверждения")
    Rel_D(bookingController, bookingEngine, "Обрабатывает запросы бронирования")
    Rel_D(bookingController, reservationManager, "Управляет бронированиями")

    ' Обмен данными между сервисами компании
    Rel(bookingEngine, rabbit, "Публикует события бронирования")
    Rel(reservationManager, rabbit, "Публикует события управления бронированиями")

    ' БД
    Rel_L(bookingEngine, postgres, "Читает из и записывает в", "SQL/TCP")
    Rel_L(bookingEngine, redis, "Читает из и записывает в", "SQL/TCP")
    Rel_L(reservationManager, postgres, "Читает из и записывает в", "SQL/TCP")
    Rel_L(reservationManager, redis, "Читает из и записывает в", "SQL/TCP")
}

' Уведомление отеля и пользователя
Container(notificationServiceFacade, "Сервис обработки уведомлений", "C#", "Обрабатывает уведомления и взаимодействует с внешним API уведомлений")
Rel(bookingEngine, notificationServiceFacade, "Инициирует уведомления")
Rel(reservationManager, notificationServiceFacade, "Инициирует уведомления")

' Деньги
Container(paymentAPIFacade, "Сервис обработки платежей", "C#", "Обрабатывает платежи и взаимодействует с API платежных систем")
Rel(bookingEngine, paymentAPIFacade, "Инициирует платежи")
Rel(reservationManager, paymentAPIFacade, "Управляет возвратами и отменами")

Rel(hotel, extranet, "Посещает")
Rel(admin, extranet, "Посещает")
Rel(guest, guestProfile, "Посещает")

@enduml
