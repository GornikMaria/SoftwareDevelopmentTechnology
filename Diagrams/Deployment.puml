@startuml
!define C4P https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master
!includeurl C4P/C4_Container.puml

title C4 Infrastructure Diagram - Система обмена валют

Person(hotel, "Отель", "Управление бронированиями и отзывами")
Person(admin, "Администратор", "Модерация отзывов и управление системой")
Person(guest, "Гость", "Поиск и бронирование отелей")

package "Платформа" {
  Container(extranet, "Личный кабинет отеля", "ReactTS", "Веб приложение, отображающее внутренние продукты")
  Container(guestProfile, "Личный профиль пользователя", "ReactTS", "Веб приложение, занимающееся личными данными пользователя, историей и бронированием")
  together {
    hotel --> extranet : "Посещает", "HTTP"
    admin --> extranet : "Посещает", "HTTP"
    guest --> guestProfile : "Посещает", "HTTP"
  }
' Нужно подумать
  Container(nginx, "Nginx", "Nginx", "Обратный прокси и балансировщик нагрузки")

  package "Kubernetes Cluster" as k8s_cluster {
    package "Сервис отзывов" as reviews_pod {
      Container(reviews, "Сервис отзывов", "C#", "Сервис размещения, визуалиации и валидации отзывов")
    }

    package "Сервис бронирования отелей" as bookingSystem_pod {
      Container(bookingSystem, "Сервис бронирования отелей", "C#", "Сервис для поиска и бронирования отелей")
    }

    package "Сервис управления подписок" as subscriptionManager_pod {
      Container(subscriptionManager, "Сервис управления подписок", "C#", "Управляет подписками отеля, проводит оплаты и отправляет письма")
    }

    package "Сервис аналитики" as analytics_pod {
      Container(analytics, "Сервис аналитики", "C#", "Сервис для обработки и сбора аналитики")
    }

    package "Сервис обработки уведомлений" as notificationServiceHandler_pod {
      Container(notificationServiceHandler, "Сервис обработки уведомлений", "C#", "Обрабатывает уведомления и взаимодействует с внешним API уведомлений")
    }

    package "Сервис обработки платежей" as paymentService_pod {
      Container(paymentService, "Сервис обработки платежей", "C#", "Обрабатывает платежи и взаимодействует с API платежных систем")
    }

    package "Сервис личного кабинета пользователя" as guestProfileService_pod {
      Container(guestProfileService, "Сервис личного кабинета пользователя", "C#", "WebAPI приложение, собирающее данные для ЛК гостя")
    }

    package "Сервис личного кабинета отеля" as extranetService_pod {
      Container(extranetService, "Сервис личного кабинета отеля", "C#", "WebAPI приложение, собирающее данные для ЛК отеля")
    }
    extranet --> extranetService : "API вызовы", "REST API"
    guestProfile --> guestProfileService : "API вызовы", "REST API"
  }
  ' Нужно подумать
  Container(zabbix, "Мониторинг", "zabbix")

  Container(database, "База данных", "PostgreSQL")
  Rel(extranetService, database, "Читает/пишет данные", "SQL/TCP")
  Rel(guestProfileService, database, "Читает/пишет данные", "SQL/TCP")
  Rel(notificationServiceHandler, database, "Читает/пишет данные", "SQL/TCP")
  Rel(analytics, database, "Читает/пишет данные", "SQL/TCP")
  Rel(subscriptionManager, database, "Читает/пишет данные", "SQL/TCP")
  Rel(reviews, database, "Читает/пишет данные", "SQL/TCP")
  Rel(bookingSystem, database, "Читает/пишет данные", "SQL/TCP")

  ContainerDb(rabbit, "Message bus", "RabbitMQ", "Пушит уведомления о происхождении событий")
  Rel(extranetService, rabbit, "Публикация событий", "SQL/TCP")
  Rel(guestProfileService, rabbit, "Публикация событий", "SQL/TCP")
  Rel(notificationServiceHandler, rabbit, "Публикация событий", "SQL/TCP")
  Rel(analytics, rabbit, "Публикация событий", "SQL/TCP")
  Rel(subscriptionManager, rabbit, "Публикация событий", "SQL/TCP")
  Rel(reviews, rabbit, "Публикация событий", "SQL/TCP")
  Rel(bookingSystem, rabbit, "Публикация событий", "SQL/TCP")

  together {
    System_Ext(paymentAPI, "API платежных систем", "Обработка платежей")
    System_Ext(externalAPI, "API карт", "Интеграция с картами (Google, Яндекс)")
  }
  together {
    extranet ---> externalAPI : "API вызовы", "REST API"
    guestProfile ---> externalAPI : "API вызовы", "REST API"
    paymentService ---> paymentAPI : "API вызовы", "REST API"
  }
}

package "Вспомогательный сервер" {
  Container(zabbix2, "Мониторинг", "zabbix")
  Container(service, "Сервис резервного копирования", "backup service")
  Rel(service, database, "TCP/IP")
  Rel(zabbix, zabbix2, "TCP/IP")
}

@enduml